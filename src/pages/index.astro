---
import { render } from 'astro:content';
import { getCollection, getEntry} from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import Layout from '@layouts/MainLayout.astro';
import RecentPosts from '@components/RecentPosts.astro';
import Header from '@components/Header.astro';
import Social from '@components/Social.astro';
import Footer from '@components/Footer.astro';

type Props = CollectionEntry<'pages'>;
type BlogPost = CollectionEntry<'posts'>;

const posts = (await getCollection('posts') as unknown as BlogPost[])
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const page = await getEntry('pages', 'home');
if (!page) {
  // Handle Error, for example:
  throw new Error('Could not render home page');
}
const { Content } = await render(page);
const { 
  title,
  tagline,
} = page.data as Props['data'];
---

<Layout title={title}>
  <Header class="p-6 lg:p-12">
    {title && (
      <h1 class="text-6xl lg:text-8xl pt-16 lg:pt-32 text-cream"
        set:html={title}
      />
    )}
    {tagline && (
      <h2 class="text-xl lg:text-3xl pt-8 text-cream max-w-screen-sm"
        set:html={tagline}
      />
    )}
  </Header>

  <main class="relative container p-6 lg:p-12 z-10 flex flex-wrap gap-6 lg:gap-12 text-cream">
    <div class="max-w-screen-sm prose">
      <Content />
      <Social />
    </div>
    <div class="max-w-screen-sm">
      <RecentPosts posts={posts} />
    </div>
  </main>
  
  <Footer title={title} class="p-6 lg:p-12" />
</Layout>

<style>
  :root {
    --overlay-gradient: linear-gradient(180deg, rgba(0, 0, 0, 0.8) 70%, rgba(0, 0, 0, 1) 100%);
  }

  body {
    background: 
      var(--overlay-gradient),
      url('/images/cover.jpg') top center / cover no-repeat;
  }

  /* For high-DPI displays */
  @media 
  (-webkit-min-device-pixel-ratio: 2), 
  (min-resolution: 192dpi) { 
    body {
      background: 
        var(--overlay-gradient),
        url('/images/cover@2x.jpg') top center / cover no-repeat;
    }
  }
  
  /* Keep the wander animation in CSS since it's complex to do in Tailwind */
	h1::before {
		animation: wander 60s linear infinite;
		content: "";
		display: block;
		width: 100%;
		height: 1px;
		background: var(--color-main);
	}

  @keyframes wander {
		0% {
			transform: rotate(0) translate3d(0, 0, 0);
			opacity: 0.5;
		}
		50% {
			transform: rotate(360deg) translate3d(50%, 50%, 0);
		}
		100% {
			transform: rotate(-360deg) translate3d(-50%, -50%, 0);
			opacity: 1;
		}
	}

  .prose :global(p) {
    margin-bottom: 1em;
  }
</style>

