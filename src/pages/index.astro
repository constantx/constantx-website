---
import { render } from 'astro:content';
import { getCollection, getEntry} from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import Layout from '@/layouts/MainLayout.astro';
import RecentPosts from '@/components/RecentPosts.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import HighlightBlock from '@/components/HighlightBlock.astro';

type Props = CollectionEntry<'pages'>;
type BlogPost = CollectionEntry<'posts'>;

const posts = (await getCollection('posts') as unknown as BlogPost[])
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const page = await getEntry('pages', 'home');
if (!page) {
  // Handle Error, for example:
  throw new Error('Could not render home page');
}
const { Content } = await render(page);
const { 
  title,
  tagline,
} = page.data as Props['data'];

const containerClasses = 'grid md:gap-6 grid-cols-6 lg:gap-12 text-cream';
---

<Layout title={title}>
  <div class="min-h-screen flex flex-col">
    <Header class:list={containerClasses}>
      {title && (
        <h1 class="col-span-6 lg:col-span-4 pt-6 pl-6 text-5xl font-bold md:text-7xl lg:text-9xl mb-6 lg:mb-0"
          set:html={title}
        />
      )}
      {tagline && (
        <HighlightBlock class="col-start-2 col-span-5 lg:col-span-2">
          <h2 
            class="text-xl lg:text-3xl md:justify-self-end text-accent"
            set:html={tagline}
          />
        </HighlightBlock>
      )}
    </Header>
    
    <main class:list={[containerClasses, 'mt-6 md:mt-12 flex-1']}>
      <div class="prose text-pretty max-w-prose lg:text-lg col-start-2 col-span-6 md:col-start-4 md:col-span-3 lg:col-start-2 lg:col-span-2">
        <Content />
      </div>


      { posts.length > 0 && (
        <HighlightBlock class="whitespace-nowrap md:col-span-2 lg:col-span-1">
          <h2 class="inline-block font-bold mb-6 uppercase tracking-widest text-accent">
            Recent Thoughts
          </h2>
        </HighlightBlock>
      )}
      <div class="col-span-1 md:col-span-2 mt-6 lg:mt-12 lg:-ml-12">
        <RecentPosts posts={posts} />
      </div>
    </main>
    
    <Footer title={title} class:list={['mt-6 lg:mt-12']}/>
  </div>
</Layout>

<style>
  :root {
    --overlay-gradient: linear-gradient(180deg, rgba(0, 0, 0, 0.8) 70%, rgba(0, 0, 0, 1) 100%);
  }

  body {
    background: 
      var(--overlay-gradient),
      url('/images/cover.jpg') top center / cover no-repeat;
  }

  /* For high-DPI displays */
  @media  (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) { 
    body {
      background: 
        var(--overlay-gradient),
        url('/images/cover@2x.jpg') top center / cover no-repeat;
    }
  }
  
  /* Keep the wander animation in CSS since it's complex to do in Tailwind */
	body::after {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    content: "";
		display: block;
		width: 100%;
		height: 1px;
		background: var(--color-accent);
		animation: wander 60s linear infinite;
    z-index: 9999;
	}

  @keyframes wander {
		0% {
			transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg) translate3d(0, 0, 0) scale(1);
			opacity: 0.3;
		}
		15% {
			transform: rotateX(180deg) rotateY(90deg) rotateZ(45deg) translate3d(30vw, -20vh, 100px) scale(1.5);
			opacity: 0.8;
		}
		30% {
			transform: rotateX(-90deg) rotateY(270deg) rotateZ(180deg) translate3d(-25vw, 40vh, -50px) scale(0.7);
			opacity: 0.4;
		}
		45% {
			transform: rotateX(270deg) rotateY(180deg) rotateZ(-90deg) translate3d(50vw, -30vh, 200px) scale(2);
			opacity: 0.9;
		}
		60% {
			transform: rotateX(120deg) rotateY(-45deg) rotateZ(270deg) translate3d(-40vw, 25vh, -100px) scale(0.5);
			opacity: 0.6;
		}
		75% {
			transform: rotateX(-180deg) rotateY(360deg) rotateZ(135deg) translate3d(35vw, -45vh, 150px) scale(1.3);
			opacity: 0.7;
		}
		90% {
			transform: rotateX(45deg) rotateY(-270deg) rotateZ(-180deg) translate3d(-30vw, 35vh, -75px) scale(0.8);
			opacity: 0.5;
		}
		100% {
			transform: rotateX(360deg) rotateY(720deg) rotateZ(-360deg) translate3d(0, 0, 0) scale(1);
			opacity: 0.3;
		}
	}

  .prose :global(p) {
    margin-bottom: 1em;
  }
</style>

