---
export interface Props {
  code: string;
  id?: string;
}

const { code, id = `mermaid-${Math.random().toString(36).substr(2, 9)}` } = Astro.props;
---

<div class="mermaid-container">
  <div id={id} class="mermaid">{code}</div>
</div>

<script>
  import mermaid from 'mermaid';

  // Initialize Mermaid
  mermaid.initialize({
    startOnLoad: true,
    theme: 'base',
    themeVariables: {
      primaryColor: 'var(--color-brand)',
      primaryTextColor: 'var(--color-foreground)',
      primaryBorderColor: 'var(--color-border)',
      lineColor: 'var(--color-border)',
      secondaryColor: 'var(--color-muted)',
      tertiaryColor: 'var(--color-accent)',
      background: 'var(--color-background)',
      mainBkg: 'var(--color-background)',
      secondBkg: 'var(--color-muted)',
      tertiaryBkg: 'var(--color-accent)',
    },
  });

  // Re-render on theme changes
  const observer = new MutationObserver(() => {
    mermaid.init();
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme', 'class'],
  });
</script>

<style>
  .mermaid-container {
    @apply my-6 flex justify-center;
  }

  .mermaid {
    @apply max-w-full overflow-x-auto;
  }

  /* Mermaid theme integration */
  :global(.mermaid svg) {
    max-width: 100%;
    height: auto;
  }

  :global(.mermaid .node rect),
  :global(.mermaid .node circle),
  :global(.mermaid .node ellipse),
  :global(.mermaid .node polygon) {
    fill: var(--color-card);
    stroke: var(--color-border);
  }

  :global(.mermaid .node .label) {
    color: var(--color-foreground);
  }

  :global(.mermaid .edgePath .path) {
    stroke: var(--color-border);
  }

  :global(.mermaid .edgeLabel) {
    background-color: var(--color-background);
    color: var(--color-foreground);
  }
</style> 